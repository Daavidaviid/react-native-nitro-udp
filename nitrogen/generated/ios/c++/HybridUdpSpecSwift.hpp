///
/// HybridUdpSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridUdpSpec.hpp"

// Forward declaration of `HybridUdpSpec_cxx` to properly resolve imports.
namespace NitroUdp { class HybridUdpSpec_cxx; }

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }

#include <string>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/ArrayBufferHolder.hpp>
#include <functional>

#include "NitroUdp-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::udp {

  /**
   * The C++ part of HybridUdpSpec_cxx.swift.
   *
   * HybridUdpSpecSwift (C++) accesses HybridUdpSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridUdpSpec_cxx can directly inherit from the C++ class HybridUdpSpec
   * to simplify the whole structure and memory management.
   */
  class HybridUdpSpecSwift: public virtual HybridUdpSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridUdpSpecSwift(const NitroUdp::HybridUdpSpec_cxx& swiftPart):
      HybridObject(HybridUdpSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroUdp::HybridUdpSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline void initialize(const std::string& host, double port) override {
      auto __result = _swiftPart.initialize(host, std::forward<decltype(port)>(port));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void send(const std::shared_ptr<ArrayBuffer>& data) override {
      auto __result = _swiftPart.send(ArrayBufferHolder(data));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void onReceive(const std::function<void(const std::shared_ptr<ArrayBuffer>& /* data */)>& callback) override {
      auto __result = _swiftPart.onReceive(callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void close() override {
      auto __result = _swiftPart.close();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }

  private:
    NitroUdp::HybridUdpSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::udp
