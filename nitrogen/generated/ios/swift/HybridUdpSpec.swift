///
/// HybridUdpSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridUdpSpec``
public protocol HybridUdpSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func initialize(host: String, port: Double) throws -> Void
  func send(data: ArrayBuffer) throws -> Void
  func onReceive(callback: @escaping (_ data: ArrayBuffer) -> Void) throws -> Void
  func close() throws -> Void
}

/// See ``HybridUdpSpec``
open class HybridUdpSpec_base {
  private weak var cxxWrapper: HybridUdpSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridUdpSpec_cxx {
  #if DEBUG
    guard self is HybridUdpSpec else {
      fatalError("`self` is not a `HybridUdpSpec`! Did you accidentally inherit from `HybridUdpSpec_base` instead of `HybridUdpSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridUdpSpec_cxx(self as! HybridUdpSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the Udp HybridObject.
 * Implement this protocol to create Swift-based instances of Udp.
 * ```swift
 * class HybridUdp : HybridUdpSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridUdpSpec = HybridUdpSpec_protocol & HybridUdpSpec_base
