///
/// JHybridUdpSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridUdpSpec.hpp"

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <string>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include <functional>
#include "JFunc_void_std__shared_ptr_ArrayBuffer_.hpp"

namespace margelo::nitro::udp {

  jni::local_ref<JHybridUdpSpec::jhybriddata> JHybridUdpSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridUdpSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridUdpSpec::initHybrid),
    });
  }

  size_t JHybridUdpSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridUdpSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridUdpSpec::initialize(const std::string& host, double port) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* host */, double /* port */)>("initialize");
    method(_javaPart, jni::make_jstring(host), port);
  }
  void JHybridUdpSpec::send(const std::shared_ptr<ArrayBuffer>& data) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JArrayBuffer::javaobject> /* data */)>("send");
    method(_javaPart, JArrayBuffer::wrap(data));
  }
  void JHybridUdpSpec::onReceive(const std::function<void(const std::shared_ptr<ArrayBuffer>& /* data */)>& callback) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void_std__shared_ptr_ArrayBuffer_::javaobject> /* callback */)>("onReceive_cxx");
    method(_javaPart, JFunc_void_std__shared_ptr_ArrayBuffer__cxx::fromCpp(callback));
  }
  void JHybridUdpSpec::close() {
    static const auto method = javaClassStatic()->getMethod<void()>("close");
    method(_javaPart);
  }

} // namespace margelo::nitro::udp
