///
/// HybridUdpSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridUdpSpec.hpp"




namespace margelo::nitro::udp {

  using namespace facebook;

  class JHybridUdpSpec: public jni::HybridClass<JHybridUdpSpec, JHybridObject>,
                        public virtual HybridUdpSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/udp/HybridUdpSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridUdpSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridUdpSpec::TAG),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridUdpSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;
    void dispose() noexcept override;

  public:
    inline const jni::global_ref<JHybridUdpSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    

  public:
    // Methods
    void initialize(const std::string& host, double port) override;
    void send(const std::shared_ptr<ArrayBuffer>& data) override;
    void onReceive(const std::function<void(const std::shared_ptr<ArrayBuffer>& /* data */)>& callback) override;
    void close() override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridUdpSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::udp
